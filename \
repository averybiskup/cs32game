//#ifndef ACTOR_H_
//#define ACTOR_H_

//#include "GraphObject.h"
//#include "GameWorld.h"
//#include <string>

//// Students:  Add code to this file, Actor.cpp, StudentWorld.h, and StudentWorld.cpp

//GameWorld* createStudentWorld(std::string assetPath = "");

//class Actor: public GraphObject 
//{
    //public:
        //Actor(int imageID, double startX, double startY, int dir, 
              //int size, int depth, GameWorld* sw, bool isAlive, 
              //bool iCanCollide)
        //: GraphObject(imageID, startX, startY, dir,  size, depth) 
        //{
            //gw = sw;
            //alive = isAlive;
            //canCollide = iCanCollide;
        //}; 
        
        //virtual void doSomething() = 0;
        //GameWorld* getWorld() 
        //{
            //return gw;
        //}

        //void kill() 
        //{
            //alive = false;
        //}

        //bool checkAlive() 
        //{
            //return alive;
        //}

        //bool collideable() 
        //{
            //return canCollide;
        //}

        //virtual void hit() {};
        //virtual void setHp(int damage) {};
        //virtual double getHp() { return 0; };

    //private:
        //GameWorld* gw;
        //bool alive;
        //bool canCollide;
//};

//class Healthy: public Actor 
//{
    //public:
        //Healthy(int imageID, double startX, double startY, int dir,
                //int size, int depth, GameWorld* sw, double health)
            //: Actor(imageID, startX, startY, dir, size, depth, sw, true, true)
        //{
            //hp = health;
        //}

        //void setHp(int damage);
        //double getHp();
            
    //private:
        //double hp;

//};

//class GhostRacer: public Healthy 
//{
    //public:
        //GhostRacer(int imageID, double startX, double startY, int dir,
                   //int size, int depth, GameWorld* sw)
        //: Healthy(imageID, startX, startY, dir, size, depth, sw, 100) 
        //{
            //speed = 0;
        
        //};

        //void doSomething();
        //double getSpeed();
        //void setSpeed(int new_speed);

    //private:
        //double speed;
//};

//class BorderLine: public Actor 
//{
    //public:
        //BorderLine(int imageID, double startX, double startY, int dir,
                   //int size, int depth, GameWorld* gw, GhostRacer* gr, 
                   //bool collidable)
        //: Actor(imageID, startX, startY, size, dir, depth, gw, true, collidable) {
            //player = gr;
            //vertSpeed = -4;
            //horzSpeed = 0;
        //};

        //void doSomething();
        //GhostRacer* returnPlayer() 
        //{
            //return player;
        //}

    //private:
        //GhostRacer* player;
        //double vertSpeed;
        //double horzSpeed;
//};


//class WhiteBorder: public BorderLine 
//{
    //public:
        //WhiteBorder(int imageID, double startX, double startY, int dir, 
                    //int size, int depth, GameWorld* gw, GhostRacer* gr)
        //: BorderLine(imageID, startX, startY, size, dir, depth, gw, gr, false) {};


//};

//class YellowBorder: public BorderLine 
//{
    //public:
        //YellowBorder(int imageID, double startX, double startY, int dir,
                     //int size, int depth, GameWorld* gw, GhostRacer* gr)
        //: BorderLine(imageID, startX, startY, size, dir, depth, gw, gr, true) {};

        //void hit();

//};

//#endif // ACTOR_H_
//
#ifndef ACTOR_INCLUDED
#define ACTOR_INCLUDED

#include "GraphObject.h"

class StudentWorld;

//int imageID, double startX, double startY, int dir = 0, double size = 1.0, unsigned int depth = 0)
class Actor : public GraphObject
{
public:
    Actor(StudentWorld* sw, int imageID, double x, double y, double size, int dir, int depth)
        : GraphObject(imageID, x, y, dir, size, depth);
    {
        sw = sw;
        isDead = false; 
        verticalSpeed = 0;
    }
      // Action to perform for each tick.
    virtual void doSomething() = 0;

      // Is this actor dead?
    bool isDead() const;
    
      // Mark this actor as dead.
    void setDead();

      // Get this actor's world
    StudentWorld* world() const {
        return studentWorld;
    }

      // Get this actor's vertical speed.
    double getVerticalSpeed() const;

      // Set this actor's vertical speed.
    void setVerticalSpeed(double speed);

      // If this actor is affected by holy water projectiles, then inflict that
      // affect on it and return true; otherwise, return false.
    virtual bool beSprayedIfAppropriate();

      // Does this object affect zombie cab placement and speed?
    virtual bool isCollisionAvoidanceWorthy() const;

      // Adjust the x coordinate by dx to move to a position with a y coordinate
      // determined by this actor's vertical speed relative to GhostRacser's
      // vertical speed.  Return true if the new position is within the view;
      // otherwise, return false, with the actor dead.
    virtual bool moveRelativeToGhostRacerVerticalSpeed(double dx);

private:
    bool isDead;
    StudentWorld* sw;

};

class BorderLine : public Actor
{
public:
    BorderLine(StudentWorld* sw, double x, double y, bool isYellow)
        : Actor(sw, (isYellow) ? IID_YELLOW_BORDER_LINE : IID_WHITE_BORDER_LINE,
                      x, y, 0, 2, 2);
    virtual void doSomething();
};

class Agent : public Actor
{
public:
    Agent(StudentWorld* sw, int imageID, double x, double y, double size, int dir, int hp)
        : Actor(sw, imageID, x, y, size, dir, 0);
    virtual bool isCollisionAvoidanceWorthy() const;

      // Get hit points.
    int getHP() const;

      // Increase hit points by hp.
    void setHP(int hp);

      // Do what the spec says happens when hp units of damage is inflicted.
      // Return true if this agent dies as a result, otherwise false.
    virtual bool takeDamageAndPossiblyDie(int hp);

      // What sound should play when this agent is damaged but does not die?
    virtual int soundWhenHurt();

      // What sound should play when this agent is damaged and dies?
    virtual int soundWhenDie();
private:
    int health;
};

class GhostRacer : public Agent
{
public:
    GhostRacer(StudentWorld* sw, double x, double y)
        : Agent(sw, IID_GHOST_RACER, x, y, 4, 90, 100);
    virtual void doSomething();
    virtual int soundWhenDie() const;

      // How many holy water projectiles does the object have?
    int getNumSprays() const;

      // Increase the number of holy water projectiles the object has.
    void increaseSprays(int amt);

      // Spin as a result of hitting an oil slick.
    void spin();
};

class Pedestrian : public Agent
{
public:
    Pedestrian(StudentWorld* sw, int imageID, double x, double y, double size);
    virtual int soundWhenHurt() const;
    virtual int soundWhenDie() const;

      // Get the pedestrian's horizontal speed
    int getHorizSpeed() const;

      // Set the pedestrian's horizontal speed
    void setHorizSpeed(int s);

      // Move the pedestrian.  If the pedestrian doesn't go off screen and
      // should pick a new movement plan, pick a new plan.
    void moveAndPossiblyPickPlan();
};

class HumanPedestrian : public Pedestrian
{
public:
    HumanPedestrian(StudentWorld* sw, double x, double y);
    virtual void doSomething();
    virtual bool beSprayedIfAppropriate();
    virtual bool takeDamageAndPossiblyDie(int hp);
};

class ZombiePedestrian : public Pedestrian
{
public:
    ZombiePedestrian(StudentWorld* sw, double x, double y);
    virtual void doSomething();
    virtual bool beSprayedIfAppropriate();
};

class ZombieCab : public Agent
{
public:
    ZombieCab(StudentWorld* sw, double x, double y);
    virtual void doSomething();
    virtual bool beSprayedIfAppropriate();
};

class Spray : public Actor
{
public:
    Spray(StudentWorld* sw, double x, double y, int dir);
    virtual void doSomething();
};

class GhostRacerActivatedObject : public Actor
{
public:
    GhostRacerActivatedObject(StudentWorld* sw, int imageID, double x, double y, double size, int dir);
    virtual bool beSprayedIfAppropriate();

      // Do the object's special activity (increase health, spin Ghostracer, etc.)
    virtual void doActivity(GhostRacer* gr) = 0;

      // Return the object's increase to the score when activated.
    virtual int getScoreIncrease() const = 0;

      // Return the sound to be played when the object is activated.
    virtual int getSound() const;

      // Return whether the object dies after activation.
    virtual bool selfDestructs() const = 0;

      // Return whether the object is affected by a holy water projectile.
    virtual bool isSprayable() const = 0;
};

class OilSlick : public GhostRacerActivatedObject
{
public:
    OilSlick(StudentWorld* sw, double x, double y);
    virtual void doSomething();
    virtual void doActivity(GhostRacer* gr);
    virtual int getScoreIncrease() const;
    virtual int getSound() const;
    virtual bool selfDestructs() const;
    virtual bool isSprayable() const;
};

class HealingGoodie : public GhostRacerActivatedObject
{
public:
    HealingGoodie(StudentWorld* sw, double x, double y);
    virtual void doSomething();
    virtual void doActivity(GhostRacer* gr);
    virtual int getScoreIncrease() const;
    virtual bool selfDestructs() const;
    virtual bool isSprayable() const;
};

class HolyWaterGoodie : public GhostRacerActivatedObject
{
public:
    HolyWaterGoodie(StudentWorld* sw, double x, double y);
    virtual void doSomething();
    virtual void doActivity(GhostRacer* gr);
    virtual int getScoreIncrease() const;
    virtual bool selfDestructs() const;
    virtual bool isSprayable() const;
};

class SoulGoodie : public GhostRacerActivatedObject
{
public:
    SoulGoodie(StudentWorld* sw, double x, double y);
    virtual void doSomething();
    virtual void doActivity(GhostRacer* gr);
    virtual int getScoreIncrease() const;
    virtual int getSound() const;
    virtual bool selfDestructs() const;
    virtual bool isSprayable() const;
};

#endif // ACTOR_INCLUDED
